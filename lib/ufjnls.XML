<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ufjnls</name>
    </assembly>
    <members>
        <member name="T:Dapper.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="M:Dapper.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Dapper.CommandFlags)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="T:Dapper.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.None">
            <summary>
            No additional flags
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:Dapper.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.FindExplicitConstructor">
            <summary>
            Always returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not implemented as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:Dapper.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="P:Dapper.DbString.IsAnsiDefault">
            <summary>
            Default value for IsAnsi.
            </summary>
        </member>
        <member name="F:Dapper.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:Dapper.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="P:Dapper.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:Dapper.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:Dapper.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:Dapper.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="M:Dapper.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="T:Dapper.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:Dapper.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:Dapper.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dapper.DefaultTypeMap.FindExplicitConstructor">
            <summary>
            Returns the constructor, if any, that has the ExplicitConstructorAttribute on it.
            </summary>
        </member>
        <member name="M:Dapper.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dapper.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:Dapper.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="P:Dapper.DefaultTypeMap.Properties">
            <summary>
            The settable properties for this typemap
            </summary>
        </member>
        <member name="T:Dapper.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:Dapper.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="P:Dapper.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="P:Dapper.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:Dapper.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="T:Dapper.ExplicitConstructorAttribute">
            <summary>
            Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters
            </summary>
        </member>
        <member name="T:Dapper.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:Dapper.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the feature set based on the passed connection
            </summary>
        </member>
        <member name="P:Dapper.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:Dapper.SimpleMemberMap">
            <summary>
            Represents simple member map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:Dapper.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dapper.SqlDataRecordListTVPParameter">
            <summary>
            Used to pass a IEnumerable&lt;SqlDataRecord&gt; as a SqlDataRecordListTVPParameter
            </summary>
        </member>
        <member name="M:Dapper.SqlDataRecordListTVPParameter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord},System.String)">
            <summary>
            Create a new instance of SqlDataRecordListTVPParameter
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="E:Dapper.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by Dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by Dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configure the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandler(System.Type,Dapper.SqlMapper.ITypeHandler)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandlerImpl(System.Type,Dapper.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandler``1(Dapper.SqlMapper.TypeHandler{``0})">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.LookupDbType(System.Type,System.String,System.Boolean,Dapper.SqlMapper.ITypeHandler@)">
            <summary>
            OBSOLETE: For internal usage only. Lookup the DbType and handler for a given Type and member
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtains the data as a list; if it is *already* a list, the original object is returned without
            any duplication; otherwise, ToList() is invoked.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.Execute(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a sequence of dynamic objects with properties matching the columns
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.QueryFirst(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.QueryFirstOrDefault(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.QuerySingle(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.QuerySingleOrDefault(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QueryFirst``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QueryFirstOrDefault``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QuerySingle``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QuerySingleOrDefault``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per T
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QueryFirst(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QueryFirstOrDefault(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QuerySingle(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QuerySingleOrDefault(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QueryFirst``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance or null of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QueryFirstOrDefault``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single or null instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QuerySingle``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QuerySingleOrDefault``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the record set</typeparam>
            <typeparam name="TSecond">The second type in the record set</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the record set</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.SanitizeParameterValue(System.Object)">
            <summary>
            OBSOLETE: For internal usage only. Sanitizes the paramter value with proper type casting.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ReplaceLiterals(Dapper.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.CreateParamInfoGenerator(Dapper.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.TypeMapProvider">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map instance, default is to create new instance of DefaultTypeMap</returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:Dapper.SqlMapper.SetTypeMap(System.Type,Dapper.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AsTableValuedParameter(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord},System.String)">
            <summary>
            Used to pass a IEnumerable&lt;SqlDataRecord&gt; as a TableValuedParameter
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.DontMap">
            <summary>
            Dummy type for excluding from multi-map
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadFirst">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadFirstOrDefault">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadSingle">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadSingleOrDefault">
            <summary>
            Read an individual row of the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadFirst``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadFirstOrDefault``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadSingle``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadSingleOrDefault``1">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadFirst(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadFirstOrDefault(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadSingle(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.ReadSingleOrDefault(System.Type)">
            <summary>
            Read an individual row of the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``1(System.Type[],System.Func{System.Object[],``0},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.GridReader.Command">
            <summary>
            The command associated with the reader
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="M:Dapper.SqlMapper.Parse``1(System.Data.IDataReader)">
            <summary>
            Parses a data reader to a sequence of data of the supplied type. Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Parse(System.Data.IDataReader,System.Type)">
            <summary>
            Parses a data reader to a sequence of data of the supplied type (as object). Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Parse(System.Data.IDataReader)">
            <summary>
            Parses a data reader to a sequence of dynamic. Used for deserializing a reader without a connection, etc.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetRowParser(System.Data.IDataReader,System.Type,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the row parser for a specific row on a data reader. This allows for type switching every row based on, for example, a TypeId column.
            You could return a collection of the base type but have each more specific.
            </summary>
            <param name="reader">The data reader to get the parser for the current row from</param>
            <param name="type">The type to get the parser for</param>
            <param name="startIndex">The start column index of the object (default 0)</param>
            <param name="length">The length of columns to read (default -1 = all fields following startIndex)</param>
            <param name="returnNullIfFirstMissing">Return null if we can't find the first column? (default false)</param>
            <returns>A parser for this specific object from this row.</returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetRowParser``1(System.Data.IDataReader,System.Type,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the row parser for a specific row on a data reader. This allows for type switching every row based on, for example, a TypeId column.
            You could return a collection of the base type but have each more specific.
            </summary>
            <param name="reader">The data reader to get the parser for the current row from</param>
            <param name="concreteType">The type to get the parser for</param>
            <param name="startIndex">The start column index of the object (default 0)</param>
            <param name="length">The length of columns to read (default -1 = all fields following startIndex)</param>
            <param name="returnNullIfFirstMissing">Return null if we can't find the first column? (default false)</param>
            <returns>A parser for this specific object from this row.</returns>
            <example>
            var result = new List&lt;BaseType&gt;();
            using (var reader = connection.ExecuteReader(@"
              select 'abc' as Name, 1 as Type, 3.0 as Value
              union all
              select 'def' as Name, 2 as Type, 4.0 as Value"))
            {
                if (reader.Read())
                {
                    var toFoo = reader.GetRowParser&lt;BaseType&gt;(typeof(Foo));
                    var toBar = reader.GetRowParser&lt;BaseType&gt;(typeof(Bar));
                    var col = reader.GetOrdinal("Type");
                    do
                    {
                        switch (reader.GetInt32(col))
                        {
                            case 1:
                                result.Add(toFoo(reader));
                                break;
                            case 2:
                                result.Add(toBar(reader));
                                break;
                        }
                    } while (reader.Read());
                }
            }
             
            abstract class BaseType
            {
                public abstract int Type { get; }
            }
            class Foo : BaseType
            {
                public string Name { get; set; }
                public override int Type =&gt; 1;
            }
            class Bar : BaseType
            {
                public float Value { get; set; }
                public override int Type =&gt; 2;
            }
            </example>
        </member>
        <member name="T:Dapper.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensibility
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.Equals(System.Object)">
             <summary>
            
             </summary>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.commandType">
            <summary>
            The command type
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.hashCode">
             <summary>
            
             </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.gridIndex">
             <summary>
            
             </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.type">
             <summary>
            
             </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.connectionString">
             <summary>
            
             </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.parametersType">
             <summary>
            
             </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.GetHashCode">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.Equals(Dapper.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:Dapper.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facilities for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dapper.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            
            Parameters will be default values, nulls for reference types and zero'd for value types.
            
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:Dapper.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.Settings">
            <summary>
            Permits specifying certain SqlMapper values globally.
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.Settings.UseSingleResultOptimization">
            <summary>
            Gets or sets whether Dapper should use the CommandBehavior.SingleResult optimization
            </summary>
            <remarks>Note that a consequence of enabling this option is that errors that happen <b>after</b> the first select may not be reported</remarks>
        </member>
        <member name="P:Dapper.SqlMapper.Settings.UseSingleRowOptimization">
            <summary>
            Gets or sets whether Dapper should use the CommandBehavior.SingleRow optimization
            </summary>
            <remarks>Note that on some DB providers this optimization can have adverse performance impact</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.Settings.SetDefaults">
            <summary>
            Resets all Settings to their default values
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.Settings.CommandTimeout">
            <summary>
            Specifies the default Command Timeout for all Queries
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.Settings.ApplyNullValues">
            <summary>
            Indicates whether nulls in data are silently ignored (default) vs actively applied and assigned to members
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.Settings.PadListExpansions">
            <summary>
            Should list expansions be padded with null-valued parameters, to prevent query-plan saturation? For example,
            an 'in @foo' expansion with 7, 8 or 9 values will be sent as a list of 10 values, with 3, 2 or 1 of them null.
            The padding size is relative to the size of the list; "next 10" under 150, "next 50" under 500,
            "next 100" under 1500, etc.
            </summary>
            <remarks>
            Caution: this should be treated with care if your DB provider (or the specific configuration) allows for null
            equality (aka "ansi nulls off"), as this may change the intent of your query; as such, this is disabled by 
            default and must be enabled.
            </remarks>
        </member>
        <member name="P:Dapper.SqlMapper.Settings.InListStringSplitCount">
            <summary>
            If set (non-negative), when performing in-list expansions of integer types ("where id in @ids", etc), switch to a string_split based
            operation if there are more than this many elements. Note that this feautre requires SQL Server 2016 / compatibility level 130 (or above).
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dapper.SqlMapper.StringTypeHandler`1">
            <summary>
            Base-class for simple type-handlers that are based around strings
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.StringTypeHandler`1.Parse(System.String)">
            <summary>
            Parse a string into the expected type (the string will never be null)
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.StringTypeHandler`1.Format(`0)">
            <summary>
            Format an instace into a string (the instance will never be null)
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.StringTypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dapper.SqlMapper.StringTypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dapper.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.UdtTypeHandler">
            <summary>
            A type handler for data-types that are supported by the underlying provider, but which need
            a well-known UdtTypeName to be specified
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.UdtTypeHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of UdtTypeHandler with the specified UdtTypeName
            </summary>
        </member>
        <member name="T:Dapper.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:Dapper.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:Dapper.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:Dapper.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="T:Devin.ReflectionHelper">
            <summary>
            反射帮助类
            </summary>
        </member>
        <member name="M:Devin.ReflectionHelper.CreateClassInstance(System.String)">
            <summary>
            创建对象实例
            </summary>
            <param name="fullName">命名空间名称.类型名称,程序集名称(如:MyNameSpace.MyClassName,MyAssemblyName)</param>        
            <returns></returns>
        </member>
        <member name="M:Devin.ReflectionHelper.CreateClassInstance(System.String,System.String,System.String)">
            <summary>
            创建对象实例
            </summary>
            <param name="nameSpace">命名空间名称</param>
            <param name="className">类型名称</param>
            <param name="assemblyName">程序集名称</param>
            <returns></returns>
        </member>
        <member name="M:Devin.ReflectionHelper.CreateMethodInstance(System.Object,System.String)">
            <summary>
            创建方法实例
            </summary>
            <param name="service">对象实例</param>
            <param name="methodName">方法名称</param>
            <returns></returns>
        </member>
        <member name="M:Devin.ReflectionHelper.CreateMethodInstance(System.String,System.String)">
            <summary>
            创建方法实例
            </summary>
            <param name="fullName">命名空间名称.类型名称,程序集名称(如:MyNameSpace.MyClassName,MyAssemblyName)</param>
            <param name="methodName">方法名称</param>
            <returns></returns>
        </member>
        <member name="M:Devin.ReflectionHelper.CreateMethodInstance(System.String,System.String,System.Object@)">
            <summary>
            创建方法实例
            </summary>
            <param name="fullName">命名空间名称.类型名称,程序集名称(如:MyNameSpace.MyClassName,MyAssemblyName)</param>
            <param name="methodName">方法名称</param>
            <param name="service">对象实例</param>
            <returns></returns>
        </member>
        <member name="M:Devin.ReflectionHelper.CreateMethodInstance(System.String,System.String,System.String,System.String)">
            <summary>
            创建方法实例
            </summary>
            <param name="nameSpace">命名空间名称</param>
            <param name="className">类型名称</param>
            <param name="assemblyName">程序集名称</param>
            <param name="methodName">方法名称</param>
            <returns></returns>
        </member>
        <member name="M:Devin.ReflectionHelper.DoInvoke``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            执行反射方法
            </summary>
            <param name="service">类实例</param>
            <param name="methodinfo">方法实例</param>        
            <param name="args">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:Devin.ReflectionHelper.DoInvoke``1(System.String,System.String,System.Object[])">
            <summary>
            执行反射方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fullName">命名空间.类型名,程序集(如:MyNameSpace.MyClassName,MyAssemblyName)</param>
            <param name="methodName">方法名称</param>
            <param name="args">参数数组</param>
            <returns></returns>
        </member>
        <member name="T:Devin.Base">
            <summary>
            基类
            </summary>
        </member>
        <member name="M:Devin.Base.#ctor">
            <summary>
            构造函数(初始化配置信息)
            </summary>
        </member>
        <member name="F:Devin.Base.IsDebug">
            <summary>
            IsDebug
            </summary>
        </member>
        <member name="F:Devin.Base.ConnStr">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="F:Devin.Base.LogDefaultPath">
            <summary>
            日志文件路径
            </summary>
        </member>
        <member name="F:Devin.Base.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:Devin.AppConfig">
            <summary>
            配置管理类(machine.config)
            </summary>
            <summary>
            配置管理类(app.config[*.dll.config])
            </summary>
            <summary>
            配置管理类(可自由扩充,新建同名属性即可,调用:AppConfig.YourKeyName)
            </summary>
        </member>
        <member name="M:Devin.AppConfig.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Devin.AppConfig.GetConnStr(System.String)">
            <summary>
            获取连接字符串
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.AppConfig.GetBoolValue(System.String)">
            <summary>
            获取Bool值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.AppConfig.GetIntValue(System.String)">
            <summary>
            获取int值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.AppConfig.GetString(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的字符串类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Devin.AppConfig.GetString(System.String,System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的字符串类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Devin.AppConfig.GetStringArray(System.String,System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的string[]类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="separator">分隔符</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Devin.AppConfig.GetStringArray(System.String,System.String,System.String[])">
            <summary>
            获取配置文件中appSettings节点下指定索引键的string[]类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="separator">分隔符</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Devin.AppConfig.getStringArray(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            获取配置文件中appSettings节点下指定索引键的string[]类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="separator">分隔符</param>
            <param name="valueRequired">指定配置文件中是否必须需要配置有该名称的元素，传入False则方法返回默认值，反之抛出异常</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Devin.AppConfig.GetInt32(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的Int类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>Int</returns>
        </member>
        <member name="M:Devin.AppConfig.GetInt32(System.String,System.Int32)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的Int类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>Int</returns>
        </member>
        <member name="M:Devin.AppConfig.getInt32(System.String,System.Nullable{System.Int32})">
            <summary>
            获取配置文件中appSettings节点下指定索引键的Int类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>Int</returns>
        </member>
        <member name="M:Devin.AppConfig.GetBoolean(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的布尔类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:Devin.AppConfig.GetBoolean(System.String,System.Boolean)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的布尔类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:Devin.AppConfig.getBoolean(System.String,System.Nullable{System.Boolean})">
            <summary>
            获取配置文件中appSettings节点下指定索引键的布尔类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:Devin.AppConfig.GetTimeSpan(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的时间间隔类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>时间间隔</returns>
        </member>
        <member name="M:Devin.AppConfig.GetTimeSpan(System.String,System.TimeSpan)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的时间间隔类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>时间间隔</returns>
        </member>
        <member name="M:Devin.AppConfig.getValue``1(System.String,System.Func{System.String,``0,System.Boolean},System.Nullable{``0})">
            <summary>
            获取配置文件appSettings集合中指定索引的值
            </summary>
            <typeparam name="T">返回值类型参数</typeparam>
            <param name="key">索引键</param>
            <param name="parseValue">将指定索引键的值转化为返回类型的值的委托方法</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Devin.AppConfig.getValue(System.String,System.Boolean,System.String)">
            <summary>
            获取配置文件appSettings集合中指定索引的值
            </summary>
            <param name="key">索引</param>
            <param name="valueRequired">指定配置文件中是否必须需要配置有该名称的元素，传入False则方法返回默认值，反之抛出异常</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串</returns>
        </member>
        <member name="P:Devin.AppConfig.configpath">
            <summary>
            配置文件路径
            </summary>
            <returns></returns>
        </member>
        <member name="P:Devin.AppConfig.config">
            <summary>
            配置文件类的实例
            </summary>
        </member>
        <member name="M:Devin.AppConfig.GetConnectionString(System.String)">
            <summary>
            获取连接字符串
            </summary>
            <param name="connectionName">连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:Devin.AppConfig.UpdateConnectionString(System.String,System.String,System.String)">
            <summary> 
            更新连接字符串(存在先删除，不存在即新建)
            </summary> 
            <param name="newName">连接字符串名称</param> 
            <param name="newConString">连接字符串内容</param> 
            <param name="newProviderName">数据提供程序名称</param> 
        </member>
        <member name="M:Devin.AppConfig.GetAppConfig(System.String)">
            <summary> 
            获取appSettings配置节的value项  
            </summary> 
            <param name="strKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:Devin.AppConfig.UpdateAppConfig(System.String,System.String)">
            <summary>  
            更新appSettings配置节的value项(存在先删除，不存在即新建)
            </summary>  
            <param name="newKey"></param>  
            <param name="newValue"></param>  
        </member>
        <member name="M:Devin.AppConfig.UpdateServiceModelConfig(System.String)">
            <summary>
            修改system.serviceModel配置节所有服务终结点的IP地址(待完善) 
            </summary>        
            <param name="serverIP"></param>
        </member>
        <member name="M:Devin.AppConfig.UpdateApplicationSettingsConfig(System.String,System.String)">
            <summary>
            修改applicationSettings中App.Properties.Settings中服务的IP地址(待完善) 
            </summary>
            <param name="configPath"></param>
            <param name="serverIP"></param>
        </member>
        <member name="P:Devin.AppConfig.TestConfigName">
            <summary>
            测试配置项目名称
            </summary>
        </member>
        <member name="T:Devin.Constants">
            <summary>
            常量类
            </summary>
        </member>
        <member name="T:Devin.EncrptionHelper">
            <summary>
            Encrption帮助类
            </summary>
        </member>
        <member name="M:Devin.EncrptionHelper.EncryptDES(System.String,System.String)">
            DES加密字符串
            <summary>        
            DES加密字符串        
            </summary>        
            <param name="encryptString">待加密的字符串</param>       
            <param name="encryptKey">加密密钥,要求为8位</param>        
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>        
        </member>
        <member name="M:Devin.EncrptionHelper.DecryptDES(System.String,System.String)">
            DES解密字符串
            <summary>        
            DES解密字符串        
            </summary>        
            <param name="decryptString">待解密的字符串</param>        
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>        
            <returns>解密成功返回解密后的字符串，失败返源串</returns>        
        </member>
        <member name="M:Devin.EncrptionHelper.EncryptMD5(System.String)">
            <summary>
            MD5加密字符串
            </summary>
            <param name="encryptString"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.EncrptionHelper.EncryptMD5_1(System.String)">
            <summary>
            MD5加密字符串(已过时)
            </summary>
            <param name="encryptString"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.EncrptionHelper.EncryptMD5_2(System.String)">
            <summary>
            MD5加密字符串
            </summary>
            <param name="encryptString"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.EncrptionHelper.EncryptMD5_3(System.String)">
            <summary>
            MD5加密字符串
            </summary>
            <param name="encryptString"></param>
            <returns></returns>
        </member>
        <member name="F:Devin.EncrptionHelper.RSAPublicKey">
            <summary>
            RSA公钥
            </summary>
        </member>
        <member name="F:Devin.EncrptionHelper.RSAPrivateKey">
            <summary>
            RSA私钥
            </summary>
        </member>
        <member name="M:Devin.EncrptionHelper.EncryptRSA(System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="content">要加密的文本</param>
            <returns>加密后的文本</returns>
        </member>
        <member name="M:Devin.EncrptionHelper.EncryptRSA(System.String,System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="publickey">公钥</param>
            <param name="content">要加密的文本</param>
            <returns>加密后的文本</returns>
        </member>
        <member name="M:Devin.EncrptionHelper.DecryptRSA(System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="content">要解密的文本</param>
            <returns>解密后的文本</returns>
        </member>
        <member name="M:Devin.EncrptionHelper.DecryptRSA(System.String,System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="privatekey">私钥</param>
            <param name="content">要解密的文本</param>
            <returns>解密后的文本</returns>
        </member>
        <member name="M:Devin.EncrptionHelper.MyEncode(System.String)">
            <summary>
            明源的加密函数
            </summary>
            <param name="instr">待加密的字符串</param>
            <returns>加密后的字符串</returns>
            <example>
            95938-6.707
            </example>
        </member>
        <member name="M:Devin.EncrptionHelper.MyDecode(System.String)">
            <summary>
            明源的解密函数
            </summary>
            <param name="inStr">待解密的字符串</param>
            <returns>解密后的字符串</returns>
            <example>
            6.707-95938
            </example>
        </member>
        <member name="T:Devin.DESEntity">
            <summary>
            DES实体类，仅用于DESHelper的返回
            </summary>
        </member>
        <member name="P:Devin.DESEntity.EncrptedString">
            <summary>
            加密后的字符串
            </summary>
        </member>
        <member name="P:Devin.DESEntity.keyStr">
            <summary>
            转化成字符串的Key
            </summary>
        </member>
        <member name="P:Devin.DESEntity.IVstr">
            <summary>
            转化成字符串的IV
            </summary>
        </member>
        <member name="T:Devin.DESHelper">
            <summary>
            DES加密，不需自定义KEY值，需保存加密后的字符串以及KEY和IV串
            </summary>
        </member>
        <member name="P:Devin.DESHelper.EncodingType">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="P:Devin.DESHelper.keyArray">
            <summary>
            Key数组
            </summary>
        </member>
        <member name="P:Devin.DESHelper.IVArray">
            <summary>
            IV数组
            </summary>
        </member>
        <member name="M:Devin.DESHelper.#ctor">
            <summary>
            实例化EncryptionHelper对象
            </summary>
        </member>
        <member name="M:Devin.DESHelper.#ctor(System.String)">
            <summary>
            实例化EncryptionHelper对象
            </summary>
            <param name="encodeType">编码方式</param>
        </member>
        <member name="M:Devin.DESHelper.MyEncryption(System.String)">
            <summary>
            加密方法
            </summary>
            <param name="str">待加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:Devin.DESHelper.MyEncryption(System.String,System.String)">
            <summary>
            加密方法
            </summary>
            <param name="str">待加密字符串</param>
            <param name="encodeType">编码方式</param>
            <returns></returns>
        </member>
        <member name="M:Devin.DESHelper.MyDecryption(System.String,System.String,System.String)">
            <summary>
            解密方法
            </summary>
            <param name="str">待解密字符串</param>
            <param name="key">Key</param>
            <param name="iv">IV</param>
            <returns></returns>
        </member>
        <member name="M:Devin.DESHelper.StrToBytes(System.String)">
            <summary>
            将字符串编码为字节流-系统自带
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.DESHelper.BytesToStr(System.Byte[])">
            <summary>
            将字节流编码为字符串-系统自带
            </summary>
            <param name="strArray"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.DESHelper.BytesArrayToString(System.Byte[])">
            <summary>
            将字节流数组编码为字符串-数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devin.DESHelper.StringToBytesArray(System.String)">
            <summary>
            将字符串转化为字节流数组-数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devin.DESHelper.EncryptString(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            将一个明文的二进制流转换成一个加密的二进制流
            </summary>
            <param name="strArray">一个明文的二进制数据流，其实也就是你要加密的字符串的二进制形式的数据流</param>
            <param name="Key"></param>
            <param name="IV"></param>
            <returns>返回一个加密后是二进制数据流</returns>
            <remarks>
            加密的原料是明文字节流，TripleDES算法对字节流进行加密，返回的是加密后的字节流,同时要给定加密使用的key和IV。
            把字符串明文转换成utf-8编码的字节流。
            </remarks>
        </member>
        <member name="M:Devin.DESHelper.DecryptTextFromMemory(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            将一个加密后的二进制数据流进行解密，产生一个明文的二进制数据流
            </summary>
            <param name="EncryptedDataArray">加密后的数据流</param>
            <param name="Key"></param>
            <param name="IV"></param>
            <returns>一个已经解密的二进制流</returns>
            <remarks>
            解密操作解密上面步骤生成的密文byte[]，需要使用到加密步骤使用的同一组Key和IV。
            </remarks>
        </member>
        <member name="M:Devin.ExceptionHelper.Is``1(System.Exception)">
            <summary>
            判断异常是哪个异常类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Devin.Extension">
            <summary>
            扩展类
            </summary>
        </member>
        <member name="M:Devin.Extension.FormatWith(System.String,System.Object[])">
            <summary>
            Format String
            </summary>
            <param name="format"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.FormatWith(System.String,System.Object)">
            <summary>
            Format String
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.FormatWith(System.String,System.Object,System.Object)">
            <summary>
            Format String
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.FormatWith(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Format String
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.FormatWith(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Format String
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.IsNullOrEmpty(System.String)">
            <summary>
            IsNullOrEmpty
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.IsNotNullOrEmpty(System.String)">
            <summary>
            IsNotNullOrEmpty
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.IsMatch(System.String,System.String)">
            <summary>
            Match
            </summary>
            <param name="s"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.Match(System.String,System.String)">
            <summary>
            Match
            </summary>
            <param name="s"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.IsInt(System.String)">
            <summary>
            IsInt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.ToInt(System.String)">
            <summary>
            ToInt
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.ToCamel(System.String)">
            <summary>
            ToCamel
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.ToPascal(System.String)">
            <summary>
            ToPascal
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.MinValue(System.DateTime)">
            <summary>
            日期的最小值(1900-01-01 00:00:00)
            </summary>
            <param name="sqlDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Extension.ToInt(System.Enum)">
            <summary>
            ToInt
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Devin.Fetch">
            <summary>
            Fetch操作类
            </summary>
        </member>
        <member name="M:Devin.Fetch.Get(System.String)">
            <summary>
            获取Url后面的值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Fetch.Post(System.String)">
            <summary>
            获取表单Post过来的值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Fetch.GetQueryId(System.String)">
            <summary>
            获取Url后面的值，如.....aspx?productid=2将获取到"2"
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.Fetch.GetIds(System.String)">
            <summary>
            获取表单Post过来的值，如表单checkboxlist传ids:2,3,5过来，将是int[]{2,3,5}
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Devin.Fetch.GetQueryIds(System.String)" -->
        <member name="P:Devin.Fetch.CurrentUrl">
            <summary>
            获取当前页面的Url
            </summary>
        </member>
        <member name="P:Devin.Fetch.ServerDomain">
            <summary>
            获取当前页面的主域，如www.GMS.com主域是GMS.com
            </summary>
        </member>
        <member name="P:Devin.Fetch.UserIp">
            <summary>
            获取访问用户的IP
            </summary>
        </member>
        <member name="T:Devin.HttpHelper">
            <summary>
            Http请求类
            </summary>
        </member>
        <member name="T:Devin.PicHelper">
            <summary>
            图片处理类
            </summary>
        </member>
        <member name="M:Devin.PicHelper.Image2ByteArray(System.String)">
            <summary>
            图片转化为字节数组
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.PicHelper.Image2ByteString(System.String)">
            <summary>
            图片转化为字符串
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.PicHelper.ByteArray2Image(System.Byte[])">
            <summary>
            字节数组转化为图片
            </summary>
            <param name="imgBytesIn"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.PicHelper.ByteString2Image(System.String)">
            <summary>
            字节串转化为图片
            </summary>
            <param name="imgBytesIn"></param>
            <returns></returns>
        </member>
        <member name="T:Devin.WebApiHelper">
            <summary>
            WebApi帮助类
            </summary>
        </member>
        <member name="M:Devin.WebApiHelper.Post``1(System.String,System.String,System.String,System.Int32)">
            <summary>
            Post请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="apiurl">WebApi的Url地址(不带参数)</param>
            <param name="tokenurl">WebApi的请求Token的Url地址(不带参数)</param> 
            <param name="data">请求参数("keyname"模式,按字典顺序拼接)</param>
            <param name="tokenid">请求TokenId,唯一标识符</param>
            <returns></returns>
        </member>
        <member name="M:Devin.WebApiHelper.Get``1(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Get请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="apiurl">WebApi的Url地址(不带参数)</param>        
            <param name="tokenurl">WebApi的请求Token的Url地址(不带参数)</param>  
            <param name="query">请求参数("keyname"模式,按字典顺序拼接)</param>
            <param name="queryStr">请求参数("key=name"模式,按字典顺序拼接)</param>
            <param name="tokenid">请求TokenId,唯一标识符</param>
            <param name="sign">是否启动签名验证</param>
            <returns></returns>
        </member>
        <member name="M:Devin.WebApiHelper.GetSignToken(System.String,System.Int32)">
            <summary>
            获取token
            </summary>
            <param name="apiurl">WebApi的Url地址(不带参数)</param>
            <param name="tokenid">请求TokenId,唯一标识符</param>
            <returns></returns>
        </member>
        <member name="M:Devin.WebApiHelper.GetQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            拼接get参数
            </summary>
            <param name="parames"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.WebApiHelper.GetSignature(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            计算签名
            </summary>
            <param name="tokenurl">WebApi的请求Token的Url地址(不带参数)</param>
            <param name="timestamp">时间戳</param>
            <param name="nonce">随机数</param>
            <param name="tokenid">请求TokenId,唯一标识符</param>
            <param name="data">请求参数("keyname"模式,按字典顺序拼接)</param>
            <returns></returns>
        </member>
        <member name="M:Devin.WebApiHelper.GetTimeStamp">
            <summary>  
            获取时间戳  
            </summary>  
            <returns></returns>  
        </member>
        <member name="M:Devin.WebApiHelper.GetRandom">
            <summary>  
            获取随机数
            </summary>  
            <returns></returns>  
        </member>
        <member name="T:Devin.WebApiHelper.HttpResponseMsg">
            <summary>
            返回类
            </summary>
        </member>
        <member name="P:Devin.WebApiHelper.HttpResponseMsg.code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Devin.WebApiHelper.HttpResponseMsg.msg">
            <summary>
            操作信息
            </summary>
        </member>
        <member name="P:Devin.WebApiHelper.HttpResponseMsg.data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="T:Devin.WebApiHelper.TokenEntity">
            <summary>
            Token实体类
            </summary>
        </member>
        <member name="P:Devin.WebApiHelper.TokenEntity.TokenId">
            <summary>
            TokenId
            </summary>
        </member>
        <member name="P:Devin.WebApiHelper.TokenEntity.TokenValue">
            <summary>
            TokenValue
            </summary>
        </member>
        <member name="P:Devin.WebApiHelper.TokenEntity.ExpireTime">
            <summary>
            ExpireTime
            </summary>
        </member>
        <member name="T:Devin.WebApiHelper.StatusCode">
            <summary>
            返回码类
            </summary>
        </member>
        <member name="T:Devin.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Devin.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Devin.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:Devin.RegExp">
            <summary>
            常用正则匹配类
            </summary>
        </member>
        <member name="M:Devin.RegExp.IsEmail(System.String)">
            <summary>
            是否电子邮件
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.RegExp.IsIp(System.String)">
            <summary>
            是否Ip
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.RegExp.IsNumeric(System.String)">
            <summary>
            是否整数
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.RegExp.IsPhysicalPath(System.String)">
            <summary>
            是否绝对路径
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.RegExp.IsRelativePath(System.String)">
            <summary>
            是否相对路径
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.RegExp.IsSafety(System.String)">
            <summary>
            是否安全字符串，例如包含"slect insert"等注入关键字
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.RegExp.IsUnicode(System.String)">
            <summary>
            是否为Unicode编码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.RegExp.IsUrl(System.String)">
            <summary>
            是否URL
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.RegExp.IsIdentityCard(System.String)">
            <summary>
            是否是身份证号，验证以下3种情况:
            1、身份证号码为15位数字；
            2、身份证号码为18位数字；
            3、身份证号码为17位数字+1个字母  
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.RegExp.IsMobileNo(System.String,System.Boolean)">
            <summary>
            是否是手机号
            </summary>
            <param name="s"></param>
            <param name="isRestrict">是否按严格格式验证</param>
            <returns></returns>
        </member>
        <member name="T:Devin.IniConfig">
            <summary>
            配置管理类(xxx.ini)
            </summary>
        </member>
        <member name="F:Devin.IniConfig.configData">
            <summary>
            配置项字典
            </summary>
        </member>
        <member name="F:Devin.IniConfig.fullFileName">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="M:Devin.IniConfig.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="_fileName">.ini文件的绝对路径</param>
        </member>
        <member name="M:Devin.IniConfig.get(System.String)">
            <summary>
            获取配置项
            </summary>
            <param name="key">配置项名称</param>
            <returns></returns>
        </member>
        <member name="M:Devin.IniConfig.set(System.String,System.String)">
            <summary>
            设置配置项
            </summary>
            <param name="key">配置项名称</param>
            <param name="value">配置项内容</param>
        </member>
        <member name="M:Devin.IniConfig.save">
            <summary>
            保存配置项
            </summary>
        </member>
        <member name="T:Devin.SerializeHelper">
            <summary>
            序列化帮助类
            </summary>
        </member>
        <member name="M:Devin.SerializeHelper.XmlSerialize``1(``0)">
            <summary>
            将C#数据实体转化为xml数据
            </summary>
            <param name="obj">要转化的数据实体</param>
            <returns>xml格式字符串</returns>
        </member>
        <member name="M:Devin.SerializeHelper.XmlDeserialize``1(System.String)">
            <summary>
            将xml数据转化为C#数据实体
            </summary>
            <param name="json">符合xml格式的字符串</param>
            <returns>T类型的对象</returns>
        </member>
        <member name="M:Devin.SerializeHelper.JsonSerialize``1(``0)">
            <summary>
            将C#数据实体转化为JSON数据
            </summary>
            <param name="obj">要转化的数据实体</param>
            <returns>JSON格式字符串</returns>
        </member>
        <member name="M:Devin.SerializeHelper.JsonDeserialize``1(System.String)">
            <summary>
            将JSON数据转化为C#数据实体
            </summary>
            <param name="json">符合JSON格式的字符串</param>
            <returns>T类型的对象</returns>
        </member>
        <member name="T:Devin.BaseConfig">
            <summary>
            配置基类
            </summary>
        </member>
        <member name="T:Devin.TConfig">
            <summary>
            配置类
            </summary>
        </member>
        <member name="T:Devin.DbHelper">
            <summary>
            DBHelper类
            </summary>
        </member>
        <member name="T:Devin.DbTable">
            <summary>
            表结构
            </summary>
        </member>
        <member name="P:Devin.DbTable.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="P:Devin.DbTable.SchemaName">
            <summary>
            表的架构
            </summary>
        </member>
        <member name="P:Devin.DbTable.Rows">
            <summary>
            表的记录数
            </summary>
        </member>
        <member name="P:Devin.DbTable.HasPrimaryKey">
            <summary>
            是否含有主键
            </summary>
        </member>
        <member name="P:Devin.DbTable.Commit">
            <summary>
            表描述
            </summary>
        </member>
        <member name="T:Devin.DbColumn">
            <summary>
            表字段结构
            </summary>
        </member>
        <member name="P:Devin.DbColumn.ColumnID">
            <summary>
            字段ID
            </summary>
        </member>
        <member name="P:Devin.DbColumn.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:Devin.DbColumn.ColumnName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Devin.DbColumn.ColumnType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:Devin.DbColumn.CSharpType">
            <summary>
            数据库类型对应的C#类型
            </summary>
        </member>
        <member name="P:Devin.DbColumn.CommonType">
            <summary>
            通用数据类型
            </summary>
        </member>
        <member name="P:Devin.DbColumn.ByteLength">
            <summary>
            字节长度
            </summary>
        </member>
        <member name="P:Devin.DbColumn.CharLength">
            <summary>
            字符长度
            </summary>
        </member>
        <member name="P:Devin.DbColumn.Scale">
            <summary>
            小数位
            </summary>
        </member>
        <member name="P:Devin.DbColumn.IsIdentity">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:Devin.DbColumn.IsNullable">
            <summary>
            是否可空
            </summary>
        </member>
        <member name="P:Devin.DbColumn.Remark">
            <summary>
            字段描述
            </summary>
        </member>
        <member name="T:Devin.SqlServerDbTypeMap">
            <summary>
            数据库C#类型映射
            </summary>
        </member>
        <member name="M:Devin.FileOperateHelper.GetPostfixStr(System.String)">
            <summary>
            取后缀名
            </summary>
            <param name="filename">文件名</param>
            <returns>.gif|.html格式</returns>
        </member>
        <member name="M:Devin.FileOperateHelper.WriteFile(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="Strings">文件内容</param>
        </member>
        <member name="M:Devin.FileOperateHelper.ReadFile(System.String)">
            <summary>
            读文件
            </summary>
            <param name="Path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Devin.FileOperateHelper.FileAdd(System.String,System.String)">
            <summary>
            追加文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="strings">内容</param>
        </member>
        <member name="M:Devin.FileOperateHelper.FileCoppy(System.String,System.String)">
            <summary>
            拷贝文件
            </summary>
            <param name="OrignFile">原始文件</param>
            <param name="NewFile">新文件路径</param>
        </member>
        <member name="M:Devin.FileOperateHelper.FileDel(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="Path">路径</param>
        </member>
        <member name="M:Devin.FileOperateHelper.FileMove(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="OrignFile">原始路径</param>
            <param name="NewFile">新路径</param>
        </member>
        <member name="M:Devin.FileOperateHelper.FolderCreate(System.String,System.String)">
            <summary>
            在当前目录下创建目录
            </summary>
            <param name="OrignFolder">当前目录</param>
            <param name="NewFloder">新目录</param>
        </member>
        <member name="M:Devin.FileOperateHelper.FolderCreate(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="Path"></param>
        </member>
        <member name="M:Devin.FileOperateHelper.DeleteFolder(System.String)">
            <summary>
            递归删除文件夹目录及文件
            </summary>
            <param name="dir"></param> 
            <returns></returns>
        </member>
        <member name="M:Devin.FileOperateHelper.CopyDir(System.String,System.String)">
            <summary>
            指定文件夹下面的所有内容copy到目标文件夹下面
            </summary>
            <param name="srcPath">原始路径</param>
            <param name="aimPath">目标文件夹</param>
        </member>
        <member name="M:Devin.FileOperateHelper.GetFoldAll(System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件
            </summary>
            <param name="Path">详细路径</param>
        </member>
        <member name="M:Devin.FileOperateHelper.ListTreeShow(System.IO.DirectoryInfo,System.Int32,System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件函数
            </summary>
            <param name="theDir">指定目录</param>
            <param name="nLevel">默认起始值,调用时,一般为0</param>
            <param name="Rn">用于迭加的传入值,一般为空</param>
            <returns></returns>
        </member>
        <member name="M:Devin.FileOperateHelper.GetFoldAll(System.String,System.String,System.String)">
             <summary>
             获取指定文件夹下所有子目录及文件(下拉框形)
             </summary>
             <param name="Path">详细路径</param>
            <param name="DropName">下拉列表名称</param>
            <param name="tplPath">默认选择模板名称</param>
        </member>
        <member name="M:Devin.FileOperateHelper.ListTreeShow(System.IO.DirectoryInfo,System.Int32,System.String,System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件函数
            </summary>
            <param name="theDir">指定目录</param>
            <param name="nLevel">默认起始值,调用时,一般为0</param>
            <param name="Rn">用于迭加的传入值,一般为空</param>
            <param name="tplPath">默认选择模板名称</param>
            <returns></returns>
        </member>
        <member name="M:Devin.FileOperateHelper.GetDirectoryLength(System.String)">
            <summary>
            获取文件夹大小
            </summary>
            <param name="dirPath">文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:Devin.FileOperateHelper.GetFileAttibe(System.String)">
            <summary>
            获取指定文件详细属性
            </summary>
            <param name="filePath">文件详细路径</param>
            <returns></returns>
        </member>
        <member name="T:Devin.FileHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Devin.FileHelper.DeleteDirectory(System.String)">
            <summary>
            安全的递归的删除一个文件夹
            </summary>
            <param name="targetDir"></param>
        </member>
        <member name="M:Devin.FileUpDownHelper.UpLoad">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="M:Devin.FileUpDownHelper.DownLoad">
            <summary>
            下载文件
            </summary>
        </member>
        <member name="M:Devin.FileUpDownHelper.WriteFile(System.String)">
            <summary>
            使用WriteFile下载文件  
            </summary>
            <param name="filePath">相对路径</param>
        </member>
        <member name="M:Devin.FileUpDownHelper.TransmitFile(System.String)">
            <summary>
            使用微软的TransmitFile下载文件
            </summary>
            <param name="filePath">服务器相对路径</param>
        </member>
        <member name="M:Devin.FileUpDownHelper.WriteFileBlock(System.String)">
            <summary>
            使用OutputStream.Write分块下载文件  
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Devin.FileUpDownHelper.UpLoadByControl">
            <summary>
            上传文件，使用.NET自带控件
            </summary>
        </member>
        <member name="M:Devin.FileUpDownHelper.ResponseFile(System.Web.HttpRequest,System.Web.HttpResponse,System.String,System.String,System.Int64)">
            <summary>
            输出硬盘文件，提供下载 支持大文件、续传、速度限制、资源占用小
            </summary>
            <param name="_Request">;Page.Request对象</param>
            <param name="_Response">;Page.Response对象</param>
            <param name="_fileName">下载文件名</param>
            <param name="_fullPath">带文件名下载路径</param>
            <param name="_speed">每秒允许下载的字节数</param>
            <returns>返回是否成功</returns>
            <example>
            string FullPath=System.Web.HttpContext.Current.Server.MapPath("count.txt");
            ResponseFile(this.Request,this.Response,"count.txt",FullPath,100);
            </example>
        </member>
        <member name="T:Devin.LogHelper">
            <summary>
            日志类
            </summary>
        </member>
        <member name="M:Devin.LogHelper.WriteException(System.Exception)">
            <summary>
            记录Exception日志
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:Devin.LogHelper.WriteException(System.Exception,System.String,System.Object[])">
            <summary>
            记录Exception日志，自定义信息
            </summary>
            <param name="ex">Exception</param>
            <param name="msg">自定义信息</param>
            <param name="ps"></param>
        </member>
        <member name="M:Devin.LogHelper.WriteDebug(System.String,System.Object[])">
            <summary>
            记录Debug日志
            </summary>
            <param name="msg">自定义信息</param>
            <param name="ps"></param>
        </member>
        <member name="M:Devin.LogHelper.WriteError(System.String,System.Object[])">
            <summary>
            记录Error日志
            </summary>
            <param name="msg">自定义信息</param>
            <param name="ps"></param>
        </member>
        <member name="M:Devin.LogHelper.WriteRequest(System.String,System.Object[])">
            <summary>
            记录Request日志
            </summary>
            <param name="msg">自定义信息</param>
            <param name="ps"></param>
        </member>
        <member name="F:Devin.LogHelper.defaultPath">
            <summary>
            日志文件目录 
            </summary>                
        </member>
        <member name="T:Devin.LogHelper.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:Devin.LogHelper.LogType.Error">
            <summary>
            error
            </summary>
        </member>
        <member name="F:Devin.LogHelper.LogType.Debug">
            <summary>
            debug
            </summary>
        </member>
        <member name="F:Devin.LogHelper.LogType.Exception">
            <summary>
            exception
            </summary>
        </member>
        <member name="F:Devin.LogHelper.LogType.Request">
            <summary>
            Request
            </summary>
        </member>
        <member name="M:Devin.LogHelper.MyWriteLog(System.String,System.String,Devin.LogHelper.LogType)">
            <summary>
            记录日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="path">日志存放路径</param>
            <param name="logType">日志类型</param>
        </member>
        <member name="M:Devin.LogHelper.WriteFile(System.String,System.String)">
            <summary>
            写日志到文件
            </summary>
            <param name="logContext">日志内容</param>
            <param name="fullName">文件名</param>
        </member>
        <member name="M:Devin.LogHelper.CreateErrorMeg(System.Exception)">
            <summary>
            从异常类中获取日志内容
            </summary>
            <param name="ex">异常类</param>
            <returns>日志内容</returns>
        </member>
        <member name="M:Devin.LogHelper.FormatMsg(System.Exception,System.String,Devin.LogHelper.LogType,System.Object[])">
            <summary>
            格式化日志内容
            </summary>
            <param name="ex"></param>
            <param name="msg"></param>
            <param name="logtype"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.LogHelper.CreateFileName(Devin.LogHelper.LogType)">
            <summary>
            生成日志文件名
            </summary>
            <param name="logType">日志类型</param>
            <returns>日志文件名</returns>
        </member>
        <member name="T:Devin.TimeHelper">
            <summary>
            时间类
            1、SecondToMinute(int Second) 把秒转换成分钟
            </summary>
        </member>
        <member name="M:Devin.TimeHelper.GetFormatDate(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 年月日 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt">年月日分隔符</param>
            <param name="Separator"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.TimeHelper.GetFormatTime(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 时分秒 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt"></param>
            <param name="Separator"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.TimeHelper.SecondToMinute(System.Int32)">
            <summary>
            把秒转换成分钟
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devin.TimeHelper.GetMonthLastDate(System.Int32,System.Int32)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>日</returns>
        </member>
        <member name="M:Devin.TimeHelper.DateDiff2(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期的间隔
            </summary>
            <param name="DateTime1">日期一。</param>
            <param name="DateTime2">日期二。</param>
            <returns>日期间隔TimeSpan。</returns>
        </member>
        <member name="M:Devin.TimeHelper.FormatDate(System.DateTime,System.String)">
            <summary>
            格式化日期时间
            </summary>
            <param name="dateTime1">日期时间</param>
            <param name="dateMode">显示模式</param>
            <returns>0-9种模式的日期</returns>
        </member>
        <member name="M:Devin.TimeHelper.GetRandomTime(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="M:Devin.TimeParser.SecondToMinute(System.Int32)">
            <summary>
            把秒转换成分钟
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devin.TimeParser.GetMonthLastDate(System.Int32,System.Int32)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>日</returns>
        </member>
        <member name="T:Devin.Rand">
            <summary>
            验证码类
            </summary>
        </member>
        <member name="M:Devin.Rand.Number(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="length">生成长度</param>
        </member>
        <member name="M:Devin.Rand.Number(System.Int32,System.Boolean)">
            <summary>
            生成随机数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:Devin.Rand.Str(System.Int32)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="IntStr">生成长度</param>
        </member>
        <member name="M:Devin.Rand.Str(System.Int32,System.Boolean)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:Devin.Rand.Str_char(System.Int32)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="IntStr">生成长度</param>
        </member>
        <member name="M:Devin.Rand.Str_char(System.Int32,System.Boolean)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="Length">生成长度</param>
            <param name="Sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="T:Devin.SecureCodeHelper">
            <summary>
            验证图片类
            </summary>
        </member>
        <member name="P:Devin.SecureCodeHelper.Text">
            <summary>
            验证码
            </summary>
        </member>
        <member name="P:Devin.SecureCodeHelper.Image">
            <summary>
            验证码图片
            </summary>
        </member>
        <member name="M:Devin.SecureCodeHelper.Next(System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="max">最大值</param>
        </member>
        <member name="M:Devin.SecureCodeHelper.Next(System.Int32,System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Devin.SecureCodeHelper.CreateImage">
            <summary>
            绘制验证码
            </summary>
        </member>
        <member name="M:Devin.SecureCodeHelper.GetRandomColor">
            <summary>
            字体随机颜色
            </summary>
        </member>
        <member name="M:Devin.SecureCodeHelper.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片
            </summary>
            <param name="srcBmp">图片路径</param>
            <param name="bXDir">如果扭曲则选择为True</param>
            <param name="nMultValue">波形的幅度倍数，越大扭曲的程度越高,一般为3</param>
            <param name="dPhase">波形的起始相位,取值区间[0-2*PI)</param>
        </member>
        <member name="T:Devin.SQLHelper">
            <summary>
            数据库访问类 
            </summary>
        </member>
        <member name="F:Devin.SQLHelper.connectionString">
            <summary>
            默认数据库连接字符串(app.config)
            </summary>
        </member>
        <member name="F:Devin.SQLHelper.connectionString_w">
            <summary>
            默认数据库连接字符串(web.config)
            </summary>
        </member>
        <member name="F:Devin.SQLHelper.parmCache">
            <summary>
            Hashtable to store cached parameters
            用于存储缓存的参数信息
            </summary>
        </member>
        <member name="M:Devin.SQLHelper.SetConStr(System.String)">
            <summary>
            设置连接字符串值
            </summary>
            <param name="connectionStringSign">连接字符串的标识</param>
            <returns></returns>
        </member>
        <member name="M:Devin.SQLHelper.CacheParameters(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            add parameter array to the cache
            将参数数组存入缓存中
            </summary>
            <param name="cacheKey">Key to the parameter cache(缓存参数的键)</param>
            <param name="cmdParms">an array of SqlParamters to be cached(要缓存的参数数组)</param>
        </member>
        <member name="M:Devin.SQLHelper.GetCachedParameters(System.String)">
            <summary>
            Retrieve cached parameters
            根据键值返回缓存的参数数组
            </summary>
            <param name="cacheKey">key used to lookup parameters(用来查找的键)</param>
            <returns>Cached SqlParamters array(缓存的参数数组)</returns>
        </member>
        <member name="M:Devin.SQLHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            为执行命令准备参数
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="conn">已经存在的数据库连接</param>
            <param name="trans">数据库事物处理</param>
            <param name="cmdType">SqlCommand命令类型 (存储过程， T-SQL语句， 等等。)</param>
            <param name="cmdText">Command text，T-SQL语句 例如 Select * from Products</param>
            <param name="cmdParms">返回带参数的命令</param>
        </member>
        <member name="M:Devin.SQLHelper.ExecteNonQuery(System.String)">
            <summary>
            ExecteNonQuery无参数方法
            返回执行影响的行数
            </summary>
            <param name="cmdText">T-SQL语句</param>
            <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecteNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecteNonQuery有参数方法
            返回执行影响的行数
            </summary>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecteNonQuery(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecteNonQuery基方法，使用连接字符串标识
            返回执行影响的行数
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串标识</param>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecteNonQuery基方法，使用数据库连接对象
            返回执行影响的行数
            </summary>
            <param name="sqlConnection">一个有效的数据库连接对象</param>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecteNonQuerySP(System.String)">
            <summary>
            ExecteNonQuerySP无参数方法
            返回执行影响的行数
            </summary>
            <param name="cmdText">存储过程名称</param>
            <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecteNonQuerySP(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecteNonQuerySP有参数方法
            返回执行影响的行数
            </summary>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecteNonQuerySP(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecteNonQuerySP基方法，使用连接字符串标识
            返回执行影响的行数
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串标识</param>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecteNonQuerySP(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecteNonQuerySP基方法，使用数据库连接对象
            返回执行影响的行数
            </summary>
            <param name="sqlConnection">一个有效的数据库连接对象</param>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个数值表示此SqlCommand命令执行后影响的行数</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteScalar(System.String)">
            <summary>
            ExecuteScalar无参数方法
            返回结果第一行第一列的值，类型为object
            </summary>
            <param name="cmdText">T-SQL语句</param>
            <returns>返回一个对象</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteScalar(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteScalar有参数方法
            返回结果第一行第一列的值，类型为object
            </summary>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个对象</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteScalar(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteScalar基方法，使用连接字符串标识
            返回结果第一行第一列的值，类型为object
            Execute a SqlCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串标识</param>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteScalar基方法，使用数据库连接对象
            返回结果第一行第一列的值，类型为object
            Execute a SqlCommand that returns the first column of the first record against an existing database connection 
            using the provided parameters.
            </summary>
            <param name="sqlConnection">一个有效的数据库连接对象</param>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteScalarSP(System.String)">
            <summary>
            ExecuteScalarSP无参数方法
            返回结果第一行第一列的值，类型为object
            </summary>
            <param name="cmdText">存储过程名称</param>
            <returns>返回一个对象</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteScalarSP(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteScalarSP有参数方法
            返回结果第一行第一列的值，类型为object
            </summary>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个对象</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteScalarSP(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteScalarSP基方法，使用连接字符串标识
            返回结果第一行第一列的值，类型为object
            Execute a SqlCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串标识</param>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteScalarSP(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteScalarSP基方法，使用数据库连接对象
            返回结果第一行第一列的值，类型为object
            Execute a SqlCommand that returns the first column of the first record against an existing database connection 
            using the provided parameters.
            </summary>
            <param name="sqlConnection">一个有效的数据库连接对象</param>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteReader(System.String)">
            <summary>
            ExecuteReader无参数方法
            返回一个结果集，类型为SqlDataReader
            </summary>
            <param name="cmdText">T-SQL语句</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteReader有参数方法
            返回一个结果集，类型为SqlDataReader
            </summary>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteReader(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteReader基方法，使用连接字符串标识
            返回一个结果集，类型为SqlDataReader
            Execute a SqlCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串标识</param>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteReader基方法，使用数据库连接对象
            返回一个结果集，类型为SqlDataReader
            Execute a SqlCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="sqlConnection">一个有效的数据库连接对象</param>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteReaderSP(System.String)">
            <summary>
            ExecuteReaderSP无参数方法
            返回一个结果集，类型为SqlDataReader
            </summary>
            <param name="cmdText">存储过程名称</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteReaderSP(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteReaderSP有参数方法
            返回一个结果集，类型为SqlDataReader
            </summary>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteReaderSP(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteReaderSP基方法，使用连接字符串标识
            返回一个结果集，类型为SqlDataReader
            Execute a SqlCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串标识</param>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteReaderSP(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteReaderSP基方法，使用数据库连接对象
            返回一个结果集，类型为SqlDataReader
            Execute a SqlCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="sqlConnection">一个有效的数据库连接对象</param>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteDataSet(System.String)">
            <summary>
            ExecuteDataSet无参数方法
            返回一个结果集，类型为DataSet
            </summary>
            <param name="cmdText">T-SQL语句</param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteDataSet(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteDataSet有参数方法
            返回一个结果集，类型为DataSet
            </summary>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters"></param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteDataSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteDataSet基方法，使用连接字符串标识
            返回一个结果集，类型为DataSet
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串</param>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteDataSet基方法，使用数据库连接对象
            返回一个结果集，类型为DataSet
            </summary>
            <param name="sqlConnection">一个有效的数据库连接对象</param>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteDataSetSP(System.String)">
            <summary>
            ExecuteDataSetSP无参数方法
            返回一个结果集，类型为DataSet
            </summary>
            <param name="cmdText">存储过程名称</param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteDataSetSP(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteDataSetSP有参数方法
            返回一个结果集，类型为DataSet
            </summary>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters"></param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteDataSetSP(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteDataSetSP基方法，使用连接字符串标识
            返回一个结果集，类型为DataSet
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串</param>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteDataSetSP(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteDataSetSP基方法，使用数据库连接对象
            返回一个结果集，类型为DataSet
            </summary>
            <param name="sqlConnection">一个有效的数据库连接对象</param>
            <param name="cmdText">存储过程名称</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>return a dataset</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteDataSet(System.String,System.String,System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteDataSet基方法，使用连接字符串标识
            返回一个结果集，类型为DataView
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串</param>
            <param name="sortExpression"></param>
            <param name="direction"></param>
            <param name="cmdType">存储过程或者T-SQL语句</param>
            <param name="cmdText">存储过程的名称或者T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String,System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteDataSet基方法，使用数据库连接对象
            返回一个结果集，类型为DataView
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接对象</param>
            <param name="sortExpression"></param>
            <param name="direction"></param>
            <param name="cmdType">存储过程或者T-SQL语句</param>
            <param name="cmdText">存储过程的名称或者T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteTables(System.String)">
            <summary>
            ExecuteTables无参数方法
            返回一个表集合(DataTableCollection)表示查询得到的数据集
            </summary>
            <param name="cmdText">T-SQL语句</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteTables(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteTables有参数方法
            返回一个表集合(DataTableCollection)表示查询得到的数据集
            </summary>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteTables(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteTables基方法，使用连接字符串标识
            返回一个表集合(DataTableCollection)表示查询得到的数据集
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串</param>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteTables(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteTables基方法，使用数据库连接对象
            返回一个表集合(DataTableCollection)表示查询得到的数据集
            </summary>
            <param name="sqlConnection">一个有效的数据库连接对象</param>
            <param name="cmdText">T-SQL语句</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteTablesSP(System.String)">
            <summary>
            ExecuteTablesSP无参数方法
            返回一个表集合(DataTableCollection)表示查询得到的数据集
            </summary>
            <param name="cmdText">存储过程</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteTablesSP(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteTablesSP有参数方法
            返回一个表集合(DataTableCollection)表示查询得到的数据集
            </summary>
            <param name="cmdText">存储过程</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteTablesSP(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteTablesSP基方法，使用连接字符串标识
            返回一个表集合(DataTableCollection)表示查询得到的数据集
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串</param>
            <param name="cmdText">存储过程</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:Devin.SQLHelper.ExecuteTablesSP(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            ExecuteTablesSP基方法，使用数据库连接对象
            返回一个表集合(DataTableCollection)表示查询得到的数据集
            </summary>
            <param name="sqlConnection">一个有效的数据库连接对象</param>
            <param name="cmdText">存储过程</param>
            <param name="commandParameters">以数组形式提供SqlCommand命令中用到的参数列表</param>
            <returns>返回一个表集合(DataTableCollection)表示查询得到的数据集</returns>
        </member>
        <member name="M:Devin.SQLHelper.Exists(System.String)">
            <summary>
            检查是否存在
            </summary>
            <param name="strSql">Sql语句</param>
            <returns>bool结果</returns>
        </member>
        <member name="M:Devin.SQLHelper.Exists(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            检查是否存在
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="cmdParms">参数</param>
            <returns>bool结果</returns>
        </member>
        <member name="M:Devin.SQLHelper.Exists(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            检查是否存在
            </summary>
            <param name="connectionStringSign">一个有效的数据库连接字符串标识</param>
            <param name="strSql">Sql语句</param>
            <param name="cmdParms">参数</param>
            <returns>bool结果</returns>
        </member>
        <member name="M:Devin.SQLHelper.Exists(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            检查是否存在
            </summary>
            <param name="sqlConnection">一个有效的数据库连接对象</param>
            <param name="strSql">Sql语句</param>
            <param name="cmdParms">参数</param>
            <returns>bool结果</returns>
        </member>
        <member name="T:Devin.BOOKMARK">
            <summary>
            书签表
            </summary>
        </member>
        <member name="T:Devin.BOOKMARK.EBOOKMARK">
            <summary>字段枚举</summary>	
        </member>
        <member name="F:Devin.BOOKMARK.EBOOKMARK.Id">
            <summary>书签ID</summary>
        </member>
        <member name="F:Devin.BOOKMARK.EBOOKMARK.BMName">
            <summary>书签名称</summary>
        </member>
        <member name="F:Devin.BOOKMARK.EBOOKMARK.BMUrl">
            <summary>书签链接</summary>
        </member>
        <member name="F:Devin.BOOKMARK.EBOOKMARK.BCGuid">
            <summary></summary>
        </member>
        <member name="F:Devin.BOOKMARK.EBOOKMARK.BMIcon">
            <summary>书签小图标</summary>
        </member>
        <member name="F:Devin.BOOKMARK.EBOOKMARK.BMIcon_big">
            <summary>书签大图标</summary>
        </member>
        <member name="F:Devin.BOOKMARK.EBOOKMARK.BMOrder">
            <summary>书签优先级</summary>
        </member>
        <member name="F:Devin.BOOKMARK.ps">
            <summary>字段列表</summary>	
        </member>
        <member name="F:Devin.BOOKMARK.tablename">
            <summary>对应数据库的表名</summary>	
        </member>
        <member name="P:Devin.BOOKMARK.Id">
            <summary>书签ID</summary>		
        </member>
        <member name="P:Devin.BOOKMARK.BMName">
            <summary>书签名称</summary>		
        </member>
        <member name="P:Devin.BOOKMARK.BMUrl">
            <summary>书签链接</summary>		
        </member>
        <member name="P:Devin.BOOKMARK.BCGuid">
            <summary></summary>		
        </member>
        <member name="P:Devin.BOOKMARK.BMIcon">
            <summary>书签小图标</summary>		
        </member>
        <member name="P:Devin.BOOKMARK.BMIcon_big">
            <summary>书签大图标</summary>		
        </member>
        <member name="P:Devin.BOOKMARK.BMOrder">
            <summary>书签优先级</summary>		
        </member>
        <member name="T:Devin.CacheHelper">
            <summary>
            本地缓存帮助类
            </summary>
        </member>
        <member name="M:Devin.CacheHelper.Get(System.String)">
            <summary>
            本地缓存获取
            </summary>
            <param name="name">key</param>
            <returns></returns>
        </member>
        <member name="M:Devin.CacheHelper.Remove(System.String)">
            <summary>
            本地缓存移除
            </summary>
            <param name="name">key</param>
        </member>
        <member name="M:Devin.CacheHelper.Set(System.String,System.Object)">
            <summary>
            本地缓存写入（默认缓存20min）
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Devin.CacheHelper.Set(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            本地缓存写入（默认缓存20min）,依赖项
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
            <param name="cacheDependency">依赖项</param>
        </member>
        <member name="M:Devin.CacheHelper.Set(System.String,System.Object,System.Int32)">
            <summary>
            本地缓存写入
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
            <param name="seconds">缓存秒数</param>
        </member>
        <member name="M:Devin.CacheHelper.Set(System.String,System.Object,System.Int32,System.Boolean,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            本地缓存写入，包括分钟，是否绝对过期及缓存过期的回调
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
            <param name="seconds">缓存秒数</param>
            <param name="isAbsoluteExpiration">是否绝对过期</param>
            <param name="onRemoveCallback">缓存过期回调</param>
        </member>
        <member name="T:Devin.CookieHelper">
            <summary>
            Cookie帮助类
            </summary>
        </member>
        <member name="M:Devin.CookieHelper.Get(System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.CookieHelper.GetValue(System.String)">
            <summary>
            获取Cookie值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Devin.CookieHelper.Remove(System.String)">
            <summary>
            移除Cookie
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Devin.CookieHelper.Remove(System.Web.HttpCookie)">
            <summary>
            移除Cookie
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:Devin.CookieHelper.Save(System.String,System.String,System.Int32)">
            <summary>
            保存Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="expiresSeconds"></param>
        </member>
        <member name="M:Devin.CookieHelper.Save(System.String,System.String,System.String,System.Int32)">
            <summary>
            保存Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="domain"></param>
            <param name="expiresSeconds"></param>
        </member>
        <member name="M:Devin.CookieHelper.Save(System.Web.HttpCookie,System.Int32)">
            <summary>
            保存Cookie
            </summary>
            <param name="cookie"></param>
            <param name="expiresSeconds"></param>
        </member>
        <member name="M:Devin.CookieHelper.Set(System.String,System.String)">
            <summary>
            修改cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Devin.Utils">
            <summary>
            通用方法类
            </summary>
        </member>
        <member name="M:Devin.Utils.compareArr_1(System.Int32[],System.Int32[])">
            <summary>
            数组比较(linq方式)
            </summary>
            <param name="arr1">第一个数组</param>
            <param name="arr2">第二个数组</param>
            <returns></returns>
        </member>
        <member name="M:Devin.Utils.compareArr_2(System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            数组比较(双重for循环方式)
            </summary>
            <param name="arr1">第一个数组</param>
            <param name="arr2">第二个数组</param>
            <param name="strict">是否启用严格模式(顺序和值都要求一致)</param>
            <returns></returns>
        </member>
        <member name="M:Devin.Utils.ConvertInt2DateTime(System.String)">
            <summary>
            时间戳转为C#格式时间
            </summary>
            <param name="timeStamp">Unix时间戳格式</param>
            <returns>C#格式时间</returns>
        </member>
        <member name="M:Devin.Utils.ConvertDateTime2Int(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time"> DateTime时间格式</param>
            <returns>Unix时间戳格式</returns>
        </member>
        <member name="M:Devin.Utils.GetNewGuid">
            <summary>
            获取32位长度的GUID
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devin.ZipHelper2">
            <summary>
            Zip帮助类:ICSharpCode.SharpZipLib.Zip
            </summary>
        </member>
        <member name="F:Devin.ZipHelper2.avg">
            <summary>
            100MB写一次
            </summary>
        </member>
        <member name="M:Devin.ZipHelper2.Zip(System.String,System.String)">
            <summary>
            压缩文件、文件夹
            </summary>
            <param name="FileToZip">待压缩的文件或文件夹，全路径格式</param>
            <param name="ZipedFile">压缩后生成的压缩文件名，全路径格式</param>
            <returns>压缩是否成功</returns>
        </member>
        <member name="M:Devin.ZipHelper2.ZipNo(System.String,System.String)">
            <summary>
            压缩文件、文件夹，不压缩顶级目录
            </summary>
            <param name="FolderToZip">待压缩的文件夹，全路径格式</param>
            <param name="ZipedFile">压缩后生成的压缩文件名，全路径格式</param>
            <returns>压缩是否成功</returns>
        </member>
        <member name="M:Devin.ZipHelper2.Zip(System.String,System.String,System.String)">
            <summary>
            压缩文件、文件夹
            </summary>
            <param name="FileToZip">待压缩的文件或文件夹，全路径格式</param>
            <param name="ZipedFile">压缩后生成的压缩文件名，全路径格式</param>
            <param name="Password">压缩密码</param>
            <returns>压缩是否成功</returns>
        </member>
        <member name="M:Devin.ZipHelper2.UnZip(System.String,System.String)">
            <summary>  
            解压zip格式的文件
            </summary>  
            <param name="zipFilePath">压缩文件路径，全路径格式</param>  
            <param name="unZipDir">解压文件存放路径,全路径格式，为空时默认与压缩文件同一级目录下，跟压缩文件同名的文件夹</param>    
            <returns>解压是否成功</returns>  
        </member>
        <member name="M:Devin.ZipHelper2.ZipFileDictory(System.String,System.String,System.String)">
            <summary>
            压缩目录
            </summary>
            <param name="FolderToZip">待压缩的文件夹，全路径格式</param>
            <param name="ZipedFile">压缩后的文件名，全路径格式，如果为空则文件名为待压缩的文件名加上.rar</param>
            <param name="Password">压缩密码</param>
            <returns></returns>
        </member>
        <member name="M:Devin.ZipHelper2.ZipFile(System.String,System.String,System.String)">
            <summary>
            压缩文件
            </summary>
            <param name="FileToZip">要进行压缩的文件名</param>
            <param name="ZipedFile">压缩后生成的压缩文件名，如果为空则文件名为待压缩的文件名加上.rar</param>
            <param name="Password">压缩密码</param>
            <returns>压缩是否成功</returns>
        </member>
        <member name="M:Devin.ZipHelper2.ZipFileDictory(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            递归压缩文件夹方法
            </summary>
            <param name="FolderToZip"></param>
            <param name="s"></param>
            <param name="ParentFolderName"></param>
        </member>
        <member name="T:Devin.ZipHelper1">
            <summary>
            Zip帮助类:System.IO.Compression.ZipFile
            </summary>
        </member>
        <member name="M:Devin.ZipHelper1.Zip(System.String,System.String)">
            <summary>
            压缩文件，将指定文件夹中的文件压缩成一个指定文件名的压缩文件
            </summary>
            <param name="sourceDirectoryName">源目标文件夹</param>
            <param name="destinationArchiveFileName">目标压缩文件</param>
        </member>
        <member name="M:Devin.ZipHelper1.UnZip(System.String,System.String)">
            <summary>
            解压文件，将指定的压缩文件解压到指定的文件夹
            </summary>
            <param name="sourceArchiveFileName">源压缩文件</param>
            <param name="destinationDirectoryName">目标文件夹</param>
        </member>
        <member name="M:Devin.ZipHelper1.AddFileToZip">
            <summary>
            添加文件到指定的压缩文件中
            </summary>
        </member>
        <member name="M:Devin.ZipHelper1.GetFileFromZip">
            <summary>
            从压缩文件中获取指定名称的文件
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.AppSettingsHelper">
            <summary>
            配置文件appSettings节点的帮助方法
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.GetString(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的字符串类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>字符串</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.GetString(System.String,System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的字符串类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.GetStringArray(System.String,System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的string[]类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="separator">分隔符</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.GetStringArray(System.String,System.String,System.String[])">
            <summary>
            获取配置文件中appSettings节点下指定索引键的string[]类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="separator">分隔符</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.getStringArray(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            获取配置文件中appSettings节点下指定索引键的string[]类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="separator">分隔符</param>
            <param name="valueRequired">指定配置文件中是否必须需要配置有该名称的元素，传入False则方法返回默认值，反之抛出异常</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.GetInt32(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的Int类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>Int</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.GetInt32(System.String,System.Int32)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的Int类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>Int</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.getInt32(System.String,System.Nullable{System.Int32})">
            <summary>
            获取配置文件中appSettings节点下指定索引键的Int类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>Int</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.GetBoolean(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的布尔类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.GetBoolean(System.String,System.Boolean)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的布尔类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.getBoolean(System.String,System.Nullable{System.Boolean})">
            <summary>
            获取配置文件中appSettings节点下指定索引键的布尔类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.GetTimeSpan(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的时间间隔类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>时间间隔</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.GetTimeSpan(System.String,System.TimeSpan)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的时间间隔类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>时间间隔</returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.getValue``1(System.String,System.Func{System.String,``0,System.Boolean},System.Nullable{``0})">
            <summary>
            获取配置文件appSettings集合中指定索引的值
            </summary>
            <typeparam name="T">返回值类型参数</typeparam>
            <param name="key">索引键</param>
            <param name="parseValue">将指定索引键的值转化为返回类型的值的委托方法</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.AppSettingsHelper.getValue(System.String,System.Boolean,System.String)">
            <summary>
            获取配置文件appSettings集合中指定索引的值
            </summary>
            <param name="key">索引</param>
            <param name="valueRequired">指定配置文件中是否必须需要配置有该名称的元素，传入False则方法返回默认值，反之抛出异常</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串</returns>
        </member>
        <member name="T:GMS.Framework.Utility.AssemblyHelper">
            <summary>
            程序集反射辅助类
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.AssemblyHelper.GetEntryAssembly">
            <summary>
            得到入口程序集，兼容Web和Winform
            </summary>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.AssemblyHelper.FindTypeByInheritType(System.Type,System.String)">
            <summary>
            扫描程序集找到继承了某基类的所有子类
            </summary>
            <param name="inheritType">基类</param>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.AssemblyHelper.FindAllPropertyByAttribute``1(System.String)">
            <summary>
            扫描程序集找到带有某个Attribute的所有PropertyInfo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.AssemblyHelper.FindAllTypeByAttribute``1(System.String)">
            <summary>
            扫描程序集找到类型上带有某个Attribute的所有类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.AssemblyHelper.FindTypeByInterface``1(System.String)">
            <summary>
            扫描程序集找到实现了某个接口的第一个实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.AssemblyHelper.GetBaseDirectory">
            <summary>
            得到当前应用程序的根目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Collection.Random``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            数组或list随机选出几个
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">数组或list</param>
            <param name="count">选出数量</param>
            <returns></returns>
        </member>
        <member name="T:GMS.Framework.Utility.Converter">
            <summary>
            各种值类型转换
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToInt(System.Decimal)">
            <summary>
            小数转整数，类似四舍五入
            </summary>
            <param name="value">小数</param>
            <returns>整数</returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToInt(System.Double)">
            <summary>
            double转整数，类似四舍五入
            </summary>
            <param name="value">double</param>
            <returns>整数</returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.CutOff(System.DateTime,System.Int64)">
            <summary>
            将时间精确到哪个级别
            </summary>
            <param name="dateTime"></param>
            <param name="cutTicks"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToCnDataString(System.DateTime)">
            <summary>
            把时间转换成字符串如：2013-8-2
            </summary>
            <param name="dateTime">DateTime</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToCnDataString(System.Nullable{System.DateTime})">
            <summary>
            把时间转换成字符串如：2013-8-2
            </summary>
            <param name="dateTime">DateTime</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToPrice(System.Decimal,System.String)">
            <summary>
            小数转成价格，如3.123123会转成3.12
            </summary>
            <param name="price"></param>
            <param name="format">小数位数格式</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToShortPriceRange(System.Decimal,System.Decimal)">
            <summary>
            价格区间，会转成如 200-300
            </summary>
            <param name="fromPrice"></param>
            <param name="toPrice"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToShortPrice(System.Decimal,System.Int32)">
            <summary>
            转成价格，如200.45将转成200，小于0时将转成"暂无价格"
            </summary>
            <param name="price"></param>
            <param name="decimalPlaces"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToCnDayPrice(System.Decimal,System.String)">
            <summary>
            转成价格，如"¥200/晚起"
            </summary>
            <param name="price"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToCnPrice(System.Decimal,System.String)">
            <summary>
            转成价格，如"¥200"
            </summary>
            <param name="price"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToStar(System.String,System.Int32)">
            <summary>
            人名字只留姓，后面用*填充
            </summary>
            <param name="s"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToScore(System.Double)">
            <summary>
            小数转评分，如3.6转成4，3.3转成3.5，3转成3
            </summary>
            <param name="score"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GMS.Framework.Utility.Converter.ToPriceRange(System.String)" -->
        <member name="M:GMS.Framework.Utility.Converter.ToDay(System.DateTime)">
            <summary>
            日期转当前天，跟今天比，如转成“今天”，“昨天”，不符和就转成如“2012-8-2”
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToWeek(System.String)">
            <summary>
            日期转星期几，如"星期日", "星期一"
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToInt(System.String,System.Int32)">
            <summary>
            字符串转int
            </summary>
            <param name="s"></param>
            <param name="defalut"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToBool(System.String,System.Boolean)">
            <summary>
            字符串转bool
            </summary>
            <param name="s"></param>
            <param name="defalut"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToDouble(System.String,System.Double)">
            <summary>
            字符串转double
            </summary>
            <param name="s"></param>
            <param name="defalut"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToDecimal(System.String,System.Decimal)">
            <summary>
            字符串转decimal
            </summary>
            <param name="s"></param>
            <param name="defalut"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToGuid(System.String)">
            <summary>
            字符串转GUID
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToDateTime(System.String,System.DateTime)">
            <summary>
            字符串转日期
            </summary>
            <param name="s"></param>
            <param name="defalut"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.Converter.ToEnum``1(System.String)">
            <summary>
            字符串转Enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:GMS.Framework.Utility.Diff">
            <summary>
            Diff两个字符串
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.Diff.Build(System.String,System.String,System.Boolean)">
            <summary>
            <para>toWord为真时，适合英文，将以单词为一个单位做比较，为false，将每个字符做比较，适合无html代码的纯中文</para>
            <para>请在Web显示输出时加入2个样式，参考：http://www.rohland.co.za/index.php/2009/10/31/csharp-html-diff-algorithm/ </para>
            </summary>
            <param name="oldText"></param>
            <param name="newText"></param>
            <param name="toWord"></param>
            <returns></returns>
        </member>
        <member name="T:GMS.Framework.Utility.HtmlDiff">
            <summary>
            Diff两个字符串
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.HtmlDiff.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GMS.Framework.Utility.Diff"/> class.
            </summary>
            <param name="oldText">The old text.</param>
            <param name="newText">The new text.</param>
        </member>
        <member name="M:GMS.Framework.Utility.HtmlDiff.Build">
            <summary>
            Builds the HTML diff output
            </summary>
            <returns>HTML diff markup</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GMS.Framework.Utility.HtmlDiff.InsertTag(System.String,System.String,System.Collections.Generic.List{System.String})" -->
        <member name="T:GMS.Framework.Utility.EnumHelper">
            <summary>
            枚举帮助类
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.EnumHelper.Parse``1(System.String)">
            <summary>
            转换如："enum1,enum2,enum3"字符串到枚举值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="obj">枚举字符串</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.EnumHelper.GetEnumTitle(System.Enum,System.Enum)">
            <summary>
            根据枚举值，返回描述字符串
            如果多选枚举，返回以","分割的字符串
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.EnumHelper.GetAllEnumTitle(System.Enum,System.Enum)">
            <summary>
            根据枚举值，返回描述字符串
            如果多选枚举，返回以","分割的字符串
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.EnumHelper.GetTitleAndSynonyms``1(System.Enum)">
            <summary>
            返回键值对，建为枚举的EnumTitle中指定的名称和近义词名称，值为枚举项
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.EnumHelper.GetItemList``1(System.Enum)">
            <summary>
            根据枚举获取包含所有所有值和描述的哈希表，其文本是由应用在枚举值上的EnumTitleAttribute设定
            </summary>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.EnumHelper.GetAllItemList``1(System.Enum)">
            <summary>
            根据枚举获取包含所有所有值和描述的哈希表，其文本是由应用在枚举值上的EnumTitleAttribute设定
            </summary>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.EnumHelper.GetItemValueList``1(System.Enum)">
            <summary>
            获取枚举所有项的标题,其文本是由应用在枚举值上的EnumTitleAttribute设定
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="language">语言</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.EnumHelper.GetItemValueList``2(System.Boolean,System.Enum)">
            <summary>
            获取枚举所有项的标题,其文本是由应用在枚举值上的EnumTitleAttribute设定
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="isAll">是否生成“全部”项</param>
            <param name="language">语言</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.EnumHelper.GetAllItemValueList``2(System.Enum)">
            <summary>
            获取枚举所有项的标题,其文本是由应用在枚举值上的EnumTitleAttribute设定
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="isAll">是否生成“全部”项</param>
            <param name="language">语言</param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.EnumHelper.GetEnumDictionary``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取一个枚举的键值对形式
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="exceptTypes">排除的枚举</param>
            <returns></returns>
        </member>
        <member name="P:GMS.Framework.Utility.EnumTitleAttribute.Synonyms">
            <summary>
            近义词
            </summary>
        </member>
        <member name="F:GMS.Framework.Utility.FileWatchHelper.m_timer">
            <summary>
            The timer used to compress the notification events.
            </summary>
        </member>
        <member name="F:GMS.Framework.Utility.FileWatchHelper.TimeoutMillis">
            <summary>
            The default amount of time to wait after receiving notification before reloading the config file.
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.FileWatchHelper.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event handler used by <see cref="!:ConfigureAndWatchHandler"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
            <para>
            This handler reloads the configuration from the file when the event is fired.
            </para>
            </remarks>
        </member>
        <member name="M:GMS.Framework.Utility.FileWatchHelper.StartWatching(GMS.Framework.Utility.FileUpdate,System.String)">
            <summary>
            Start a watch
            </summary>
            <param name="updateProcess"></param>
            <param name="filePath"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:GMS.Framework.Utility.GeoHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            根据经纬度获取两点间距离，单位m
            </summary>
            <param name="lat1"></param>
            <param name="lng1"></param>
            <param name="lat2"></param>
            <param name="lng2"></param>
            <returns></returns>
        </member>
        <member name="T:GMS.Framework.Utility.ImagePosition">
            <summary>
            水印位置
            </summary>
        </member>
        <member name="F:GMS.Framework.Utility.ImagePosition.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:GMS.Framework.Utility.ImagePosition.LeftTop">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:GMS.Framework.Utility.ImagePosition.LeftBottom">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:GMS.Framework.Utility.ImagePosition.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:GMS.Framework.Utility.ImagePosition.RigthBottom">
            <summary>
            右下
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ImageUtil">
            <summary>
            ImageUtil 的摘要说明。
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.ImageUtil.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.ImageUtil.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
             生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>	
            <param name="isaddwatermark">是否添加水印</param>	
            <param name="quality">图片品质</param>	
        </member>
        <member name="M:GMS.Framework.Utility.ImageUtil.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,GMS.Framework.Utility.ImagePosition,System.String,System.Int32)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>	
            <param name="isaddwatermark">是否添加水印</param>	
            <param name="quality">图片品质</param>	
            <param name="imagePosition">水印位置</param>	
            <param name="waterImage">水印图片名称</param>	
        </member>
        <member name="T:GMS.Framework.Utility.JsUtil">
            <summary>
            提供向页面输出客户端代码实现特殊功能的方法
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.JscriptSender(System.Web.UI.Page)">
            <summary>
            向客户端发送函数KendoPostBack(eventTarget, eventArgument)
            服务器端可接收__EVENTTARGET,__EVENTARGUMENT的值
            </summary>
            <param name="page">System.Web.UI.Page 一般为this</param>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.Alert(System.String)">
            <summary>
            弹出JavaScript小窗口
            </summary>
            <param name="js">窗口信息</param>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.GoHistory(System.Int32)">
            <summary>
            回到历史页面
            </summary>
            <param name="value">-1/1</param>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.CloseWindow">
            <summary>
            关闭当前窗口
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.RefreshParent">
            <summary>
            刷新父窗口
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.JSStringFormat(System.String)">
            <summary>
            格式化为JS可解释的字符串
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.RefreshOpener">
            <summary>
            刷新打开窗口
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.OpenWebForm(System.String)">
            <summary>
            打开窗口
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.OpenWebForm(System.String,System.Boolean)">
            <summary>		
            函数名:OpenWebForm	
            功能描述:打开WEB窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-29 17:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="url">WEB窗口</param>
            <param name="isFullScreen">是否全屏幕</param>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.JavaScriptLocationHref(System.String)">
            <summary>
            转向Url制定的页面
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.JavaScriptFrameHref(System.String,System.String)">
            <summary>
            指定的框架页面转换
            </summary>
            <param name="FrameName"></param>
            <param name="url"></param>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.JavaScriptResetPage(System.String)">
             <summary>
            重置页面
             </summary>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.JavaScriptSetCookie(System.String,System.String)">
            <summary>
            函数名:JavaScriptSetCookie
            功能描述:客户端方法设置Cookie
            作者:sxs
            日期：2003-4-9
            版本：1.0
            </summary>
            <param name="strName">Cookie名</param>
            <param name="strValue">Cookie值</param>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.GotoParentWindow(System.String)">
            <summary>		
            函数名:GotoParentWindow	
            功能描述:返回父窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-30 10:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="parentWindowUrl">父窗口</param>		
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.ReplaceParentWindow(System.String,System.String,System.String)">
            <summary>		
            函数名:ReplaceParentWindow	
            功能描述:替换父窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-30 10:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="parentWindowUrl">父窗口</param>
            <param name="caption">窗口提示</param>
            <param name="future">窗口特征参数</param>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.ReplaceOpenerWindow(System.String)">
            <summary>		
            函数名:ReplaceOpenerWindow	
            功能描述:替换当前窗体的打开窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-30 16:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="openerWindowUrl">当前窗体的打开窗口</param>		
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.ReplaceOpenerParentFrame(System.String,System.String)">
            <summary>		
            函数名:ReplaceOpenerParentWindow	
            功能描述:替换当前窗体的打开窗口的父窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-07-03 19:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="openerWindowUrl">当前窗体的打开窗口的父窗口</param>		
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.ReplaceOpenerParentWindow(System.String)">
            <summary>		
            函数名:ReplaceOpenerParentWindow	
            功能描述:替换当前窗体的打开窗口的父窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-07-03 19:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="openerWindowUrl">当前窗体的打开窗口的父窗口</param>		
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.CloseParentWindow">
            <summary>		
            函数名:CloseParentWindow	
            功能描述:关闭窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-30 16:00
            修 改:
            日 期:
            版 本:
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.ShowModalDialogJavascript(System.String)">
            <summary>
            函数名:ShowModalDialogJavascript	
            功能描述:返回打开模式窗口的脚本	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-30 15:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="webFormUrl"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.JsUtil.ShowModalDialogWindow(System.String)">
            <summary>
            </summary>
            <param name="webFormUrl"></param>
            <returns></returns>
        </member>
        <member name="T:GMS.Framework.Utility.MailHelper">
            <summary>
            邮件发送帮助类
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.NetHelper">
            <summary>
            向远程Url Post/Get数据类
            </summary>
        </member>
        <member name="P:GMS.Framework.Utility.NetHelper.CNNWebClient.Timeout">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.NetHelper.CNNWebClient.GetWebRequest(System.Uri)">
            <summary>
            重写GetWebRequest,添加WebRequest对象超时时间
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.PermutationAndCombination`1.Swap(`0@,`0@)">
            <summary>
            交换两个变量
            </summary>
            <param name="a">变量1</param>
            <param name="b">变量2</param>
        </member>
        <member name="M:GMS.Framework.Utility.PermutationAndCombination`1.GetCombination(System.Collections.Generic.List{`0[]}@,`0[],System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            递归算法求数组的组合(私有成员)
            </summary>
            <param name="list">返回的范型</param>
            <param name="t">所求数组</param>
            <param name="n">辅助变量</param>
            <param name="m">辅助变量</param>
            <param name="b">辅助数组</param>
            <param name="M">辅助变量M</param>
        </member>
        <member name="M:GMS.Framework.Utility.PermutationAndCombination`1.GetPermutation(System.Collections.Generic.List{`0[]}@,`0[],System.Int32,System.Int32)">
            <summary>
            递归算法求排列(私有成员)
            </summary>
            <param name="list">返回的列表</param>
            <param name="t">所求数组</param>
            <param name="startIndex">起始标号</param>
            <param name="endIndex">结束标号</param>
        </member>
        <member name="M:GMS.Framework.Utility.PermutationAndCombination`1.GetPermutation(`0[],System.Int32,System.Int32)">
            <summary>
            求从起始标号到结束标号的排列，其余元素不变
            </summary>
            <param name="t">所求数组</param>
            <param name="startIndex">起始标号</param>
            <param name="endIndex">结束标号</param>
            <returns>从起始标号到结束标号排列的范型</returns>
        </member>
        <member name="M:GMS.Framework.Utility.PermutationAndCombination`1.GetPermutation(`0[])">
            <summary>
            返回数组所有元素的全排列
            </summary>
            <param name="t">所求数组</param>
            <returns>全排列的范型</returns>
        </member>
        <member name="M:GMS.Framework.Utility.PermutationAndCombination`1.GetPermutation(`0[],System.Int32)">
            <summary>
            求数组中n个元素的排列
            </summary>
            <param name="t">所求数组</param>
            <param name="n">元素个数</param>
            <returns>数组中n个元素的排列</returns>
        </member>
        <member name="M:GMS.Framework.Utility.PermutationAndCombination`1.GetCombination(`0[],System.Int32)">
            <summary>
            求数组中n个元素的组合
            </summary>
            <param name="t">所求数组</param>
            <param name="n">元素个数</param>
            <returns>数组中n个元素的组合的范型</returns>
        </member>
        <member name="M:GMS.Framework.Utility.SerializationHelper.XmlSerialize(System.Object,System.String)">
            <summary>
            序列化，使用标准的XmlSerializer，优先考虑使用。
            不能序列化IDictionary接口.
            </summary>
            <param name="obj">对象</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:GMS.Framework.Utility.SerializationHelper.XmlDeserializeFromFile(System.Type,System.String)">
            <summary>
            反序列化，使用标准的XmlSerializer，优先考虑使用。
            不能序列化IDictionary接口.
            </summary>
            <param name="type">对象类型</param>
            <param name="filename">文件路径</param>
            <returns>type类型的对象实例</returns>
        </member>
        <member name="M:GMS.Framework.Utility.SerializationHelper.SaveToBinaryBytes(System.Object)">
            <summary>
            将对象使用二进制格式序列化成byte数组
            </summary>
            <param name="obj">待保存的对象</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:GMS.Framework.Utility.SerializationHelper.LoadFromBinaryBytes(System.Byte[])">
            <summary>
            将使用二进制格式保存的byte数组反序列化成对象
            </summary>
            <param name="bytes">byte数组</param>
            <returns>对象</returns>
        </member>
        <member name="M:GMS.Framework.Utility.SerializationHelper.SaveToMemoryStream(System.Object)">
            <summary>
            使用BinaryFormatter将对象系列化到MemoryStream中。
            </summary>
            <param name="obj">对象</param>
            <returns>保存对象的MemoryStream</returns>
        </member>
        <member name="M:GMS.Framework.Utility.SerializationHelper.JsonSerialize``1(``0)">
            <summary>
            将C#数据实体转化为JSON数据
            </summary>
            <param name="obj">要转化的数据实体</param>
            <returns>JSON格式字符串</returns>
        </member>
        <member name="M:GMS.Framework.Utility.SerializationHelper.JsonSerialize(System.Object,System.Text.Encoding)">
            <summary>
            将C#数据实体转化为JSON数据
            </summary>
            <param name="obj">要转化的数据实体</param>
            <returns>JSON格式字符串</returns>
        </member>
        <member name="M:GMS.Framework.Utility.SerializationHelper.JsonDeserialize``1(System.String)">
            <summary>
            将JSON数据转化为C#数据实体
            </summary>
            <param name="json">符合JSON格式的字符串</param>
            <returns>T类型的对象</returns>
        </member>
        <member name="M:GMS.Framework.Utility.SerializationHelper.JsonDeserialize(System.Type,System.String)">
            <summary>
            将JSON数据转化为C#数据实体
            </summary>
            <param name="json">符合JSON格式的字符串</param>
            <returns>T类型的对象</returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringHelper.GetQuanPin(System.String)">
            <summary>
            获取中文全拼
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.StringUtil">
            <summary>
            字符串操作工具集
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.Remove(System.String,System.String)">
            <summary>
            从字符串中的尾部删除指定的字符串
            </summary>
            <param name="sourceString"></param>
            <param name="removedString"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.RightSplit(System.String,System.Char)">
            <summary>
            获取拆分符右边的字符串
            </summary>
            <param name="sourceString"></param>
            <param name="splitChar"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.LeftSplit(System.String,System.Char)">
            <summary>
            获取拆分符左边的字符串
            </summary>
            <param name="sourceString"></param>
            <param name="splitChar"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.DelLastComma(System.String)">
            <summary>
            去掉最后一个逗号
            </summary>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.DeleteUnVisibleChar(System.String)">
            <summary>
            删除不可见字符
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.GetArrayString(System.String[])">
            <summary>
            获取数组元素的合并字符串
            </summary>
            <param name="stringArray"></param>
            <returns></returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.GetStringCount(System.String[],System.String)">
            <summary>
            	获取某一字符串在字符串数组中出现的次数
            </summary>
            <param name="stringArray" type="string[]">
                <para>
                    
                </para>
            </param>
            <param name="findString" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A int value...
            </returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.GetStringCount(System.String,System.String)">
            <summary>
                获取某一字符串在字符串中出现的次数
            </summary>
            <param name="stringArray" type="string">
                <para>
                    原字符串
                </para>
            </param>
            <param name="findString" type="string">
                <para>
                    匹配字符串
                </para>
            </param>
            <returns>
                匹配字符串数量
            </returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.GetSubString(System.String,System.String)">
            <summary>
            截取从startString开始到原字符串结尾的所有字符   
            </summary>
            <param name="sourceString" type="string">
                <para>
                    
                </para>
            </param>
            <param name="startString" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.GetByteCount(System.String)">
            <summary>
            按字节数取出字符串的长度
            </summary>
            <param name="strTmp">要计算的字符串</param>
            <returns>字符串的字节数</returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.GetByteIndex(System.Int32,System.String)">
            <summary>
            按字节数要在字符串的位置
            </summary>
            <param name="intIns">字符串的位置</param>
            <param name="strTmp">要计算的字符串</param>
            <returns>字节的位置</returns>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.CutString(System.String,System.Int32)">
            <summary>
            从包含中英文的字符串中截取固定长度的一段，inputString为传入字符串，len为截取长度（一个汉字占两个位）。
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.CutString(System.String,System.Int32,System.String)">
            <summary>
            从包含中英文的字符串中截取固定长度的一段，inputString为传入字符串，len为截取长度（一个汉字占两个位）。
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.RemoveHtml(System.String)">
            <summary>
            去除文本中的html代码。
            </summary>
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.ToSBC(System.String)">
             <summary>
             半角转全角(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>        
        </member>
        <member name="M:GMS.Framework.Utility.StringUtil.ToDBC(System.String)">
             <summary>
             全角转半角(DBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCodeType">
            <summary>
            图片验证码抽象类
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style1">
            <summary>
            线条干扰(蓝色)
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style10">
            <summary>
            线条干扰(彩色) 
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style11">
            <summary>
            GIF闪烁动画(彩色)
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style12">
            <summary>
            中文(彩色)  
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style13">
            <summary>
            字体旋转(简单) 
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style14">
            <summary>
            2年级算术(彩色)
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style2">
            <summary>
            噪点干扰(蓝色)
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style3">
            <summary>
            GIF颠簸动画
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style4">
            <summary>
            线条干扰(蓝色)
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style5">
            <summary>
            GIF闪烁动画(蓝色)   
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style6">
            <summary>
            噪点干扰(扭曲) 
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style7">
            <summary>
            中文(蓝色)
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style8">
            <summary>
            2年级算术(蓝色) 
            </summary>
        </member>
        <member name="T:GMS.Framework.Utility.ValidateCode_Style9">
            <summary>
            噪点干扰(彩色)
            </summary>
        </member>
    </members>
</doc>
